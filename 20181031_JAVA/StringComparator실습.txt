1.
StringComparator 클래스의 
int compare
(String str1, String str2, boolean isLength) 
메소드를 완성하십시오. 

compare 메소드는 String 타입의 문자열을 2개 입력받아 
조건에 맞는 문자열의 문자 개수를 리턴합니다. 
isLength 값이 true 이면 문자열의 길이가 긴 문자열의 
문자 개수를 리턴하고, false 이면 문자‘a’의 개수가 
많은 문자열의 문자 개수를 리턴합니다. 


int compare(String str1, String str2, boolean isLength)
-isLength 값이 true 이면 문자열의 길이가 긴 문자열의 문자 개수를 리턴한다.
-isLength 값이 false 이면 문자 ‘a’가 많은 문자열의 문자 개수를 리턴한다.


<<처리 결과>>
예) compare("javaprogram","oracle", true) 
==>  ☞  11   
예) compare("javaprogram","oracledatabase",false)
==>  ☞  14

주의 사항 :
１)	테스트 목적으로 스스로 main을 구현할 수 있습니다. 
２)	주어진 메서드의 signature는 변경하지 않습니다.


2. url을 입력받아서 아래 출력결과처럼 분리 출력
String url = 
"http://www.kitri.re.kr:8080/java/test";

--출력결과---
www
kitri
re
kr
8080
java
test

===============================================================
package test;

public class StringComparator {
int compare(String str1, String str2, boolean isLength) {
//	-isLength 값이 true 이면 문자열의 길이가 긴 문자열의 문자 개수를 리턴한다.
//	-isLength 값이 false 이면 문자 ‘a’가 많은 문자열의 문자 개수를 리턴한다.
	if(isLength) {
		int len1 = str1.length();
		int len2 = str2.length();
		if(len1 >= len2) return len1;
		else return len2;
	}
	else {
		int cnt1=0, cnt2=0;
		for(int i = 0; i < str1.length(); i++) {
			if(str1.charAt(i) == 'a') cnt1++;
		}
		for(int i = 0; i < str2.length(); i++) {
			if(str2.charAt(i) == 'a') cnt2++;
		}
		if(cnt1 >= cnt2) return str1.length();
		else return str2.length();
	}
}//compare end

public static void main(String[] args) {
//	StringComparator sc = new StringComparator();
//	 System.out.println
//	 (sc.compare("javaprogram","oracle", true)); //11 
//	 System.out.println
//	 (sc.compare("javaprogram","oracledatabase",false)); //14
	
	 String url = 
			 "http://www.kitri.re.kr:8080/java/test";
	 // .:모든문자 패턴 정규표현식 의미 표현
	 // 의미 제거하고 특수기호 . 
	 String[] urlsp = url.split("\\.");
	 for(int i = 0; i < urlsp.length; i++) {
		 if(!urlsp[i].equals("http")
			&& !urlsp[i].equals("")	 )
		 System.out.println(urlsp[i]);
	 }
	 
}//main end
}





